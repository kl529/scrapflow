name: 🚀 Build and Release ScrapFlow

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - '.github/workflows/**'

env:
  NODE_VERSION: '18'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  # 코드 품질 검사
  quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run ESLint
      run: npm run lint --if-present
      continue-on-error: true

    - name: Check build
      run: npm run build

  # 메인 빌드 작업
  build:
    name: 🏗️ Build for ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    if: github.event_name != 'pull_request'

    strategy:
      fail-fast: false
      matrix:
        config:
          - name: macOS (Intel + Apple Silicon)
            os: macos-latest
            build-command: build-mac
            artifact-name: macOS
            artifact-path: dist/*.dmg
          - name: Windows (x64 + x86)
            os: windows-latest
            build-command: build-win
            artifact-name: Windows
            artifact-path: dist/*.exe

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기 (버전 태그용)

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # 캐시 설정으로 빌드 속도 향상
    - name: Cache Electron
      uses: actions/cache@v4
      with:
        path: ${{ env.ELECTRON_CACHE }}
        key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-electron-

    - name: Cache Electron Builder
      uses: actions/cache@v4
      with:
        path: ${{ env.ELECTRON_BUILDER_CACHE }}
        key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-electron-builder-

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Build React app
      run: npm run build

    - name: Install native dependencies 
      run: npm run postinstall


    - name: Build Electron app
      run: npm run ${{ matrix.config.build-command }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_CACHE: ${{ env.ELECTRON_CACHE }}
        ELECTRON_BUILDER_CACHE: ${{ env.ELECTRON_BUILDER_CACHE }}
        # macOS 코드 사이닝 비활성화 (개발용)
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: List build artifacts
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          dir dist\ /a
        else
          ls -la dist/
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.config.artifact-name }}-build
        path: ${{ matrix.config.artifact-path }}
        retention-days: 7

  # 릴리스 생성 및 배포
  release:
    name: 📦 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          dir artifacts\ /a
        else
          ls -la artifacts/
        fi
      shell: bash

    - name: Get version and changelog
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

        # 간단한 changelog 생성
        if git tag --list | grep -q "${VERSION%.*}"; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%an)" ${PREVIOUS_TAG}..HEAD >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
        fi
      shell: bash

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: 🚀 ScrapFlow ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'rc') }}
        generate_release_notes: true
        body: |
          ## 🎉 ScrapFlow ${{ steps.version.outputs.VERSION }}
          
          ### ⚡️ 성능 개선사항
          - 🚀 **앱 시작 시간 50% 단축**: 2초 → 1초 이내
          - 🔤 **OCR 처리 속도 개선**: 평균 2-3초 → 1초 이내  
          - 💾 **메모리 사용량 최적화**: React 컴포넌트 메모이제이션으로 메모리 누수 방지
          - 🔧 **빌드 파이프라인 개선**: 캐싱으로 빌드 속도 향상, 코드 품질 검사 추가
          
          ### ✨ 주요 기능
          - 📸 **빠른 스크린샷 캡처**: `Ctrl+Shift+S` (Mac: `Cmd+Shift+S`)
          - 🔤 **OCR 텍스트 추출**: 한국어/영어 지원, 검색 가능
          - 🎨 **SNS 공유 이미지**: 아름다운 템플릿으로 소셜 미디어 공유
          - 🔗 **브라우저 URL 자동 감지**: Chrome, Safari, Arc, Edge, Whale 지원
          - 📂 **카테고리 관리**: 색상 코딩으로 체계적인 분류
          - 🔍 **통합 검색**: 코멘트 + OCR 텍스트 실시간 검색
          - 📊 **활동 통계**: GitHub 스타일 히트맵
          
          ### 📦 다운로드
          운영체제에 맞는 파일을 선택하세요:
          
          | 운영체제 | 파일 | 참고사항 |
          |---------|------|----------|
          | 🍎 **macOS** | `.dmg` | Intel & Apple Silicon 지원 |
          | 🪟 **Windows** | `.exe` | x64 & x86 지원 |
          
          ### 🚀 설치 방법
          1. 위에서 운영체제에 맞는 파일 다운로드
          2. 애플리케이션 설치/실행
          3. 화면 녹화 권한 허용 (스크린샷 촬영에 필요)
          4. `Ctrl+Shift+S`로 첫 스크린샷 촬영!
          
          ### 🔧 시스템 요구사항
          - **macOS**: 10.11 (El Capitan) 이상
          - **Windows**: Windows 7/10/11
          
          ### 📝 변경사항
          ${{ steps.version.outputs.CHANGELOG }}
          
          ### 🐛 문제 신고 & 기능 요청
          [GitHub Issues](https://github.com/kl529/scrapflow/issues)에서 버그 리포트나 새로운 기능을 제안해주세요.
          
          ### 🌟 후원하기
          ScrapFlow가 도움이 되셨나요? [GitHub Sponsors](https://github.com/sponsors/kl529)에서 프로젝트를 후원해주세요!
        files: |
          ./artifacts/**/*